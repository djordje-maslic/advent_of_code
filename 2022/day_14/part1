
int advent(String input) {
  List<List<int>> rockCordList = rockCord(input);
  int deepestRockY = deepestRockYCord(rockCordList);
  int res = 0;
  res = sandFalling([],[500, 0], rockCordList, deepestRockY, res);
  return res;
}

int sandFalling(List<List<int>>sandFallen,List<int> sandCord, List<List<int>> rockCordList,
    int deepestRockY, int res) {
  if (checkCordList(rockCordList, [sandCord[0], sandCord[1] + 1])) {
    if (sandCord[1] + 1 < deepestRockY) {
      sandFallen.add(sandCord);
      return sandFalling(sandFallen,
          [sandCord[0], sandCord[1] + 1], rockCordList, deepestRockY, res);
    } else {
      return res;
    }
  } else if (checkCordList(rockCordList, [sandCord[0] - 1, sandCord[1] + 1])) {
    if (sandCord[1] + 1 < deepestRockY) {
      sandFallen.add(sandCord);
      return sandFalling(sandFallen,
          [sandCord[0] - 1, sandCord[1] + 1], rockCordList, deepestRockY, res);
    } else {
      return res;
    }
  } else if (checkCordList(rockCordList, [sandCord[0] + 1, sandCord[1] + 1])) {
    if (sandCord[1] + 1 < deepestRockY) {
      sandFallen.add(sandCord);
      return sandFalling(sandFallen,
          [sandCord[0] + 1, sandCord[1] + 1], rockCordList, deepestRockY, res);
    } else {
      return res;
    }
  } else {
    rockCordList.add(sandCord);
    res++;
    List<int> nextSand= sandFallen.last;
    sandFallen.removeLast();
    return sandFalling(sandFallen,nextSand, rockCordList, deepestRockY, res);
  }
}

int deepestRockYCord(List<List<int>> rockCordList) {
  int y = 0;
  for (int i = 0; i < rockCordList.length; i++) {
    if (rockCordList[i][1] > y) {
      y = rockCordList[i][1];
    }
  }
  return y;
}

List<List<int>> rockCord(String input) {
  List<String> strList = input.split('\n');
  List<List<int>> res = [];
  List<List<String>> llList = strList.map((e) => e.split('->')).toList();
  List<List<List<int>>> listCord = llList
      .map((e) => e
          .map((e) => e.split(',').map((e) => int.parse(e.trim())).toList())
          .toList())
      .toList();
  for (int i = 0; i < listCord.length; i++) {
    for (int j = 0; j < listCord[i].length-1; j++) {
        if (listCord[i][j][0] == listCord[i][j + 1][0]) {
          if (listCord[i][j][1] == listCord[i][j + 1][1]) {
            if (checkCordList(res, [listCord[i][j][0], listCord[i][j][1]])) {
              res.add([listCord[i][j][0], listCord[i][j][1]]);
            }
          } else if (listCord[i][j][1] > listCord[i][j + 1][1]) {
            int loop = listCord[i][j][1] - listCord[i][j + 1][1] + 1;
            for (int m = 0; m < loop; m++) {
              if (checkCordList(
                  res, [listCord[i][j][0], listCord[i][j + 1][1] + m])) {
                res.add([listCord[i][j][0], listCord[i][j + 1][1] + m]);
              }
            }
          } else {
            int loop = listCord[i][j + 1][1] - listCord[i][j][1] + 1;
            for (int m = 0; m < loop; m++) {
              if (checkCordList(
                  res, [listCord[i][j][0], listCord[i][j][1] + m])) {
                res.add([listCord[i][j][0], listCord[i][j][1] + m]);
              }
            }
          }
        } else if (listCord[i][j][1] == listCord[i][j + 1][1]) {
          if (listCord[i][j][0] > listCord[i][j + 1][0]) {
            int loop = listCord[i][j][0] - listCord[i][j + 1][0] + 1;
            for (int m = 0; m < loop; m++) {
              if (checkCordList(
                  res, [listCord[i][j + 1][0] + m, listCord[i][j][1]])) {
                res.add([listCord[i][j + 1][0] + m, listCord[i][j][1]]);
              }
            }
          } else {
            int loop = listCord[i][j + 1][0] - listCord[i][j][0] + 1;
            for (int m = 0; m < loop; m++) {
              if (checkCordList(
                  res, [listCord[i][j][0] + m, listCord[i][j][1]])) {
                res.add([listCord[i][j][0] + m, listCord[i][j][1]]);
              }
            }
          }
        }
      }
    }

  return res;
}

bool checkCordList(List<List<int>> list, List<int> cord) {
  for (int i = 0; i < list.length; i++) {
    if (list[i][0] == cord[0] && list[i][1] == cord[1]) {
      return false;
    }
  }
  return true;
}
