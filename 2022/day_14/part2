
int advent(String input) {
  List<List<int>> rockCordList = rockCord(input);
  int deepestRockY = deepestRockYCord(rockCordList) + 2;
  List<List<List<int>>> resList = [
    [
      [500, 0]
    ]
  ];
  for (int i = 0; i < deepestRockY-1; i++) {
    List<List<int>> cordList = [];

    for (int j = 0; j < resList[i].length; j++) {
      List<List<int>?> listForIntake =
          checkNextRock(rockCordList, resList[i][j]);
      for (int m = 0; m < listForIntake.length; m++) {
        if (listForIntake[m] != null &&
            checkCordList(cordList, listForIntake[m] ?? [500, 0])) {
          cordList.add(listForIntake[m] ?? []);
        }
      }
    }

    resList.add(cordList);
  }
  List<int> sandInEachRow= listOfLengths(resList);
 
  return sandInEachRow.reduce((value, element) => value+element);
}

List<int> listOfLengths(List<List<List<int>>>list){
  List<int> res=[];
  for(int i=0;i<list.length;i++){
    res.add(list[i].length);
  }
  return res;
}



List<List<int>?> checkNextRock(List<List<int>> list, List<int> cord) {
  List<List<int>?> resList = [
    [cord[0] - 1, cord[1] + 1],
    [cord[0], cord[1] + 1],
    [cord[0] + 1, cord[1] + 1]
  ];
  for (int i = 0; i < list.length; i++) {
    if (list[i][0] == cord[0] - 1 && list[i][1] == cord[1] + 1) {
      resList[0] = null;
    }
    if (list[i][0] == cord[0] && list[i][1] == cord[1] + 1) {
      resList[1] = null;
    }
    if (list[i][0] == cord[0] + 1 && list[i][1] == cord[1] + 1) {
      resList[2] = null;
    }
  }
  return resList;
}



int deepestRockYCord(List<List<int>> rockCordList) {
  int y = 0;
  for (int i = 0; i < rockCordList.length; i++) {
    if (rockCordList[i][1] > y) {
      y = rockCordList[i][1];
    }
  }
  return y;
}

List<List<int>> rockCord(String input) {
  List<String> strList = input.split('\n');
  List<List<int>> res = [];
  List<List<String>> llList = strList.map((e) => e.split('->')).toList();
  List<List<List<int>>> listCord = llList
      .map((e) => e
          .map((e) => e.split(',').map((e) => int.parse(e.trim())).toList())
          .toList())
      .toList();
  for (int i = 0; i < listCord.length; i++) {
    for (int j = 0; j < listCord[i].length - 1; j++) {
      if (listCord[i][j][0] == listCord[i][j + 1][0]) {
        if (listCord[i][j][1] == listCord[i][j + 1][1]) {
          if (checkCordList(res, [listCord[i][j][0], listCord[i][j][1]])) {
            res.add([listCord[i][j][0], listCord[i][j][1]]);
          }
        } else if (listCord[i][j][1] > listCord[i][j + 1][1]) {
          int loop = listCord[i][j][1] - listCord[i][j + 1][1] + 1;
          for (int m = 0; m < loop; m++) {
            if (checkCordList(
                res, [listCord[i][j][0], listCord[i][j + 1][1] + m])) {
              res.add([listCord[i][j][0], listCord[i][j + 1][1] + m]);
            }
          }
        } else {
          int loop = listCord[i][j + 1][1] - listCord[i][j][1] + 1;
          for (int m = 0; m < loop; m++) {
            if (checkCordList(
                res, [listCord[i][j][0], listCord[i][j][1] + m])) {
              res.add([listCord[i][j][0], listCord[i][j][1] + m]);
            }
          }
        }
      } else if (listCord[i][j][1] == listCord[i][j + 1][1]) {
        if (listCord[i][j][0] > listCord[i][j + 1][0]) {
          int loop = listCord[i][j][0] - listCord[i][j + 1][0] + 1;
          for (int m = 0; m < loop; m++) {
            if (checkCordList(
                res, [listCord[i][j + 1][0] + m, listCord[i][j][1]])) {
              res.add([listCord[i][j + 1][0] + m, listCord[i][j][1]]);
            }
          }
        } else {
          int loop = listCord[i][j + 1][0] - listCord[i][j][0] + 1;
          for (int m = 0; m < loop; m++) {
            if (checkCordList(
                res, [listCord[i][j][0] + m, listCord[i][j][1]])) {
              res.add([listCord[i][j][0] + m, listCord[i][j][1]]);
            }
          }
        }
      }
    }
  }

  return res;
}

bool checkCordList(List<List<int>> list, List<int> cord) {
  for (int i = 0; i < list.length; i++) {
    if (list[i][0] == cord[0] && list[i][1] == cord[1]) {
      return false;
    }
  }
  return true;
}
